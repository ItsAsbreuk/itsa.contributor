{
    "project": {
        "name": "Itsa",
        "description": "Itsa modules",
        "version": "0.0.1",
        "url": "https://github.com/itsa"
    },
    "files": {
        "dist/itsabuild.js": {
            "name": "dist/itsabuild.js",
            "modules": {
                "event": 1,
                "event-dom": 1,
                "event-hammerjs": 1,
                "event-emitter": 1,
                "event-listener": 1,
                "extend-function": 1,
                "extend-object": 1,
                "extend-promise": 1,
                "io-win": 1,
                "utils": 1,
                "ITSA": 1
            },
            "classes": {
                "Promise": 1,
                "Promise.Resolver": 1,
                "Event": 1,
                "Event.Emitter": 1,
                "Event.Listener": 1,
                "Function": 1,
                "Object": 1,
                "IO": 1,
                "Utils": 1,
                "ITSA": 1
            },
            "fors": {
                "Object": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "event": {
            "name": "event",
            "submodules": {
                "event-dom": 1,
                "event-hammerjs": 1,
                "event-listener": 1
            },
            "classes": {
                "Promise.Resolver": 1,
                "Event.Emitter": 1,
                "Event.Listener": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "dist/itsabuild.js",
            "line": 3733,
            "description": "Defines the Event-Class, which should be instantiated to get its functionality\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE",
            "is_constructor": 1,
            "since": "0.0.1"
        },
        "event-dom": {
            "name": "event-dom",
            "submodules": {},
            "classes": {
                "Promise.Resolver": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "event",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 2722,
            "description": "Integrates DOM-events to core-event-base. more about DOM-events:\nhttp://www.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/\n\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nEvent = require('event');\nDOMEvent = require('event-dom');\nDOMEvent.mergeInto(Event);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "event-hammerjs": {
            "name": "event-hammerjs",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "event",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 3512,
            "description": "Integrates DOM-events to core-event-base. more about DOM-events:\nhttp://www.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/\n\nShould be called using  the provided `init`-method like this:",
            "example": [
                "\nEvent = require('event');\nDOMEvent = require('event-dom');\nDOMEvent.mergeInto(Event);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "event-emitter": {
            "name": "event-emitter",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "extend-js",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 3614,
            "description": "Extends the Event-instance by adding the method `Emitter` to it.\nThe `Emitter-method` returns an object that should be merged into any Class-instance or object you\nwant to extend with the emit-methods, so the appropriate methods can be invoked on the instance.\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventEmitter = require('event-emitter');<br>\n    EventEmitter.mergeInto(Event);"
            ],
            "since": "0.0.1"
        },
        "event-listener": {
            "name": "event-listener",
            "submodules": {},
            "classes": {
                "Event.Emitter": 1,
                "Event.Listener": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "event",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 3733,
            "description": "Extends the Event-instance by adding the object `Listener` to it.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the listener-methods, so the appropriate methods can be invoked on the instance.\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventListener = require('event-listener');<br>\n    EventListener.mergeInto(Event);"
            ],
            "since": "0.0.1"
        },
        "extend-js": {
            "name": "extend-js",
            "submodules": {
                "event-emitter": 1,
                "extend-function": 1,
                "extend-object": 1
            },
            "classes": {
                "Event": 1,
                "Function": 1,
                "Object": 1
            },
            "fors": {
                "Object": 1
            },
            "namespaces": {},
            "file": "dist/itsabuild.js",
            "line": 5317
        },
        "extend-function": {
            "name": "extend-function",
            "submodules": {},
            "classes": {
                "Event": 1,
                "Function": 1
            },
            "fors": {
                "Object": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "extend-js",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5093,
            "description": "Pollyfils for often used functionality for Functions"
        },
        "extend-object": {
            "name": "extend-object",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "extend-js",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5272,
            "description": "Pollyfils for often used functionality for Objects"
        },
        "extend-promise": {
            "name": "extend-promise",
            "submodules": {},
            "classes": {
                "Object": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5317,
            "description": "Provides additional Promise-methods. These are extra methods which are not part of the PromiseA+ specification,\nBut are all Promise/A+ compatable."
        },
        "io": {
            "name": "io",
            "submodules": {
                "extend-promise": 1
            },
            "classes": {
                "Promise": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "dist/itsabuild.js",
            "line": 5524
        },
        "io-win": {
            "name": "io-win",
            "submodules": {},
            "classes": {
                "Promise": 1,
                "IO": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "utils",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5816,
            "description": "Provides core IO-functionality.\n\nThe returned xhr DOES support CORS for all modern browsers.\nTo use CORS, you need to setup the responseserver right\nMore info about CORS: http://remysharp.com/2011/04/21/getting-cors-working/\n\n\n\n\nTODO: make STREAMING with IE9-browsers work: the XDomainRequest() seems not to fire the onprogress-event...\n      (and XMLHttpRequest1 doesn't have this event at all)\nTODO: make CORS with IE9-browsers work: the XDomainRequest() fails currently on cors..\n\n\n\n\nUsing CORS with IE9-browsers need special consideration, for it uses the XDomainRequest():\n1. Only GET and POST methods are supported. Other methods will be reset into one of these,\n   so make sure the cross-domain-server handles all requests as being send with the GET or POST method.\n2. Only text/plain is supported for the request's Content-Type header. This will lead into troubles when handling\n   POST-requests: the cross-domain-server needs to extract the parameters itself. For nodejs, there is a nice npm module:\n   `express-ie-cors` https://github.com/advanced/express-ie-cors/blob/master/lib/express-ie-cors.js\n3. No custom headers can be added to the request.\n4. No authentication or cookies will be sent with the request.\nmore info: http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx"
        },
        "utils": {
            "name": "utils",
            "submodules": {
                "io-win": 1
            },
            "classes": {
                "IO": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "dist/itsabuild.js",
            "line": 5816,
            "description": "Collection of various utility functions.",
            "static": 1
        },
        "ITSA": {
            "name": "ITSA",
            "submodules": {},
            "classes": {
                "Utils": 1,
                "ITSA": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "dist/itsabuild.js",
            "line": 6466,
            "description": "The ITSA module is an aggregator for all the individual modules that the library uses.\nThe developer is free to use it as it is or tailor it to contain whatever modules\nhe/she might need in the global namespace.\n\nThe modules themselves work quite well independent of this module and can be used\nseparately without the need of them being integrated under one globa namespace."
        }
    },
    "classes": {
        "Promise": {
            "name": "Promise",
            "shortname": "Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5524,
            "description": "Provides additional Promise-methods. These are extra methods which are not part of the PromiseA+ specification,\nBut are all Promise/A+ compatable.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "A function where to insert the logic that resolves this\n        promise. Receives `resolve` and `reject` functions as parameters.\n        This function is called synchronously.",
                    "type": "Function"
                }
            ],
            "submodule": "io-win"
        },
        "Promise.Resolver": {
            "name": "Promise.Resolver",
            "shortname": "Promise.Resolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 2722,
            "description": "Represents an asynchronous operation. Provides a\nstandard API for subscribing to the moment that the operation completes either\nsuccessfully (`fulfill()`) or unsuccessfully (`reject()`).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "promise",
                    "description": "The promise instance this resolver will be handling",
                    "type": "Promise"
                }
            ],
            "submodule": "event-dom"
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "extend-js",
            "submodule": "extend-function",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 3879,
            "description": "Defines the Event-Class, which should be instantiated to get its functionality\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE",
            "example": [
                "\nEvent = require('event');\nDOMEvent = require('event-dom');\nDOMEvent.mergeInto(Event);"
            ]
        },
        "Event.Emitter": {
            "name": "Event.Emitter",
            "shortname": "Event.Emitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event",
            "submodule": "event-listener",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 3614,
            "description": "Extends the Event-instance by adding the method `Emitter` to it.\nThe `Emitter-method` returns an object that should be merged into any Class-instance or object you\nwant to extend with the emit-methods, so the appropriate methods can be invoked on the instance.\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventEmitter = require('event-emitter');<br>\n    EventEmitter.mergeInto(Event);"
            ]
        },
        "Event.Listener": {
            "name": "Event.Listener",
            "shortname": "Event.Listener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event",
            "submodule": "event-listener",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 3733,
            "description": "Extends the Event-instance by adding the object `Listener` to it.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the listener-methods, so the appropriate methods can be invoked on the instance.\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventListener = require('event-listener');<br>\n    EventListener.mergeInto(Event);"
            ]
        },
        "Function": {
            "name": "Function",
            "shortname": "Function",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "extend-js",
            "submodule": "extend-function",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5093,
            "description": "Pollyfils for often used functionality for Function"
        },
        "Object": {
            "name": "Object",
            "shortname": "Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "extend-js",
            "submodule": "extend-promise",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5317,
            "description": "Pollyfils for often used functionality for objects"
        },
        "IO": {
            "name": "IO",
            "shortname": "IO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils",
            "submodule": "io-win",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 5816,
            "description": "Provides core IO-functionality.\n\nThe returned xhr DOES support CORS for all modern browsers.\nTo use CORS, you need to setup the responseserver right\nMore info about CORS: http://remysharp.com/2011/04/21/getting-cors-working/\n\n\n\n\nTODO: make STREAMING with IE9-browsers work: the XDomainRequest() seems not to fire the onprogress-event...\n      (and XMLHttpRequest1 doesn't have this event at all)\nTODO: make CORS with IE9-browsers work: the XDomainRequest() fails currently on cors..\n\n\n\n\nUsing CORS with IE9-browsers need special consideration, for it uses the XDomainRequest():\n1. Only GET and POST methods are supported. Other methods will be reset into one of these,\n   so make sure the cross-domain-server handles all requests as being send with the GET or POST method.\n2. Only text/plain is supported for the request's Content-Type header. This will lead into troubles when handling\n   POST-requests: the cross-domain-server needs to extract the parameters itself. For nodejs, there is a nice npm module:\n   `express-ie-cors` https://github.com/advanced/express-ie-cors/blob/master/lib/express-ie-cors.js\n3. No custom headers can be added to the request.\n4. No authentication or cookies will be sent with the request.\nmore info: http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx"
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ITSA",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 6352,
            "description": "Collection of various utility functions."
        },
        "ITSA": {
            "name": "ITSA",
            "shortname": "ITSA",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ITSA",
            "namespace": "",
            "file": "dist/itsabuild.js",
            "line": 6466,
            "description": "The ITSA class provides the core functionality for the ITSA library\nand is the root namespace for all the additional modules.\n\nThe ITSA class cannot be instantiated.\nInstead, the ITSA function takes a configuration object to allow for tailoring of the library.\nThe ITSA function returns itself to allow for further chaining.\n\nCalling the ITSA function is optional. If the default configuration is acceptable,\nthe ITSA class can be used directly.\n\nThe ITSA name is usually used only once in an application, when configuring it\nand when calling the [`ready`](#method_ready) or [`require`](#method_require) methods.\nThe callback to these two methods provide a reference to ITSA itself as their argument.\nThese methods allow the developer to rename ITSA to a shorter name, usually `P`,\nfor use within the local scope.\n\n ITSA( config )\n     .require('dialog', 'event', ...)\n     .then(function (P) {\n         // P is an alias of ITSA\n     });\n\n // If the default configuration is acceptable, you can simply do:\n ITSA.require('dialog', 'event', ...)\n     .then(function (P) {\n         // P is an alias of ITSA\n     });\n\n // If extra modules are to be loaded later, you can simply do:\n ITSA( config ).ready\n     .then(function (P) {\n         // P is an alias of ITSA\n     });\n\n // And if no configuration is needed:\n ITSA.ready\n     .then(function (P) {\n         // P is an alias of ITSA\n     });",
            "static": 1,
            "params": [
                {
                    "name": "config",
                    "description": "Configuration options for the ITSA Library",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self",
                "type": "Object"
            }
        }
    },
    "classitems": [
        {
            "file": "dist/itsabuild.js",
            "line": 14,
            "description": "set a timeout with a given scope",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 25,
            "description": "if the argument is an array, we want to execute the fn on each entry\nif it aint an array we don't want to do a thing.\nthis is used by all the methods that accept a single and array argument.",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "*|Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 42,
            "description": "walk objects and arrays",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "iterator",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 70,
            "description": "extend object.\nmeans that properties in dest will be overwritten by the ones in src.",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 90,
            "description": "merge the values from src in the dest.\nmeans that properties that exist in dest will not be overwritten by src",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 101,
            "description": "simple class inheritance",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "base",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 120,
            "description": "simple function bind",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 132,
            "description": "let a boolean value also be a function that must return a boolean\nthis first item in args will be used as the context",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Boolean|Function"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 146,
            "description": "use the val2 when val1 is undefined",
            "params": [
                {
                    "name": "val1",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "val2",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 156,
            "description": "addEventListener with multiple events at once",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "EventTarget"
                },
                {
                    "name": "types",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 168,
            "description": "removeEventListener with multiple events at once",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "EventTarget"
                },
                {
                    "name": "types",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 180,
            "description": "find if a node is in the given parent",
            "itemtype": "method",
            "name": "hasParent",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "found",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 197,
            "description": "small indexOf wrapper",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "find",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "found",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 207,
            "description": "split string on whitespace",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "words",
                "type": "Array"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 216,
            "description": "find if a array contains the object using indexOf or a simple polyFill",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "find",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "findByKey",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "false when not found, or the index",
                "type": "Boolean|Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 238,
            "description": "convert array-like objects to real arrays",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 247,
            "description": "unique array with objects based on a key (like 'id') or just by the array's value",
            "params": [
                {
                    "name": "src",
                    "description": "[{id:1},{id:2},{id:1}]",
                    "type": "Array"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "False"
                }
            ],
            "return": {
                "description": "[{id:1},{id:2}]",
                "type": "Array"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 281,
            "description": "get the prefixed property",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "prefixed",
                "type": "String|Undefined"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 304,
            "description": "get a unique id",
            "return": {
                "description": "uniqueId",
                "type": "Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 313,
            "description": "get the window object of an element",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "DocumentView|Window"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 354,
            "description": "create new input type manager",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Input"
            },
            "is_constructor": 1,
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 381,
            "description": "should handle the inputEvent data and trigger the callback",
            "virtual": "",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 387,
            "description": "bind the events",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 396,
            "description": "unbind the events",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 406,
            "description": "create new input type manager\ncalled by the Manager constructor",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Hammer"
                }
            ],
            "return": {
                "description": "",
                "type": "Input"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 430,
            "description": "handle input events",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                },
                {
                    "name": "eventType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 463,
            "description": "extend the data with some usable properties like scale, rotate, velocity etc",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 534,
            "description": "velocity is calculated every x ms",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 569,
            "description": "create a simple clone from the input used for storage of firstInput and firstMultiple",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "clonedInputData",
                "type": "Object"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 596,
            "description": "get the center of all the pointers",
            "params": [
                {
                    "name": "pointers",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center contains `x` and `y` properties",
                "type": "Object"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 627,
            "description": "calculate the velocity between two points. unit is in px per ms.",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity `x` and `y`",
                "type": "Object"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 641,
            "description": "get the direction between two points",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "direction",
                "type": "Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 658,
            "description": "calculate the absolute distance between two points",
            "params": [
                {
                    "name": "p1",
                    "description": "{x, y}",
                    "type": "Object"
                },
                {
                    "name": "p2",
                    "description": "{x, y}",
                    "type": "Object"
                },
                {
                    "name": "props",
                    "description": "containing x and y keys",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 675,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "p1",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "p2",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "props",
                    "description": "containing x and y keys",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 691,
            "description": "calculate the rotation degrees between two pointersets",
            "params": [
                {
                    "name": "start",
                    "description": "array of pointers",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "array of pointers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 701,
            "description": "calculate the scale factor between two pointersets\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "array of pointers",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "array of pointers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 721,
            "description": "Mouse events input",
            "is_constructor": 1,
            "extends": "Input",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 737,
            "description": "handle mouse events",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 796,
            "description": "Pointer events input",
            "is_constructor": 1,
            "extends": "Input",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 811,
            "description": "handle mouse events",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 865,
            "description": "Touch events input",
            "is_constructor": 1,
            "extends": "Input",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 878,
            "description": "handle touch events",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 898,
            "this": "{TouchInput}",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "flag",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[all, changed]",
                "type": "Undefined|Array"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 953,
            "description": "Combined touch and mouse input\n\nTouch has a higher priority then mouse, and while touching no mouse events are allowed.\nThis because touch devices also emit mouse events while doing a touch.",
            "is_constructor": 1,
            "extends": "Input",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 971,
            "description": "handle mouse and touch events",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Hammer"
                },
                {
                    "name": "inputEvent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "inputData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 997,
            "description": "remove the event listeners",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1017,
            "description": "Touch Action\nsets the touchAction property or uses the js alternative",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1030,
            "description": "set the touchAction value on the element or enable the polyfill",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1046,
            "description": "just re-set the touchAction value",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1053,
            "description": "compute the value for the touchAction property based on the recognizer's settings",
            "return": {
                "description": "value",
                "type": "String"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1067,
            "description": "this method is called on each input cycle and provides the preventing of the browser behavior",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1098,
            "description": "call preventDefault to prevent the browser's default behavior (scrolling in most cases)",
            "params": [
                {
                    "name": "srcEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1108,
            "description": "when the touchActions are collected they are not a valid value, so we need to clean things up. *",
            "params": [
                {
                    "name": "actions",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1140,
            "description": "Recognizer flow explained; *\nAll recognizers have the initial state of POSSIBLE when a input session starts.\nThe definition of a input session is from the first input until the last input, with all it's movement in it. *\nExample session for mouse-input: mousedown -> mousemove -> mouseup\n\nOn each recognizing cycle (see Manager.recognize) the .recognize() method is executed\nwhich determines with state it should be.\n\nIf the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\nPOSSIBLE to give it another change on the next cycle.\n\n              Possible\n                 |\n           +-----+---------------+\n           |                     |\n     +-----+-----+               |\n     |           |               |\n  Failed      Cancelled          |\n                         +-------+------+\n                         |              |\n                     Recognized       Began\n                                        |\n                                     Changed\n                                        |\n                                 Ended/Recognized",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1175,
            "description": "Recognizer\nEvery recognizer needs to extend from this class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1197,
            "virtual": "",
            "type": "{Object}",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1203,
            "description": "set options",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Recognizer"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1216,
            "description": "recognize simultaneous with an other recognizer.",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "this",
                "type": "Recognizer"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1235,
            "description": "drop the simultaneous link. it doesnt remove the link on the other recognizer.",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "this",
                "type": "Recognizer"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1250,
            "description": "recognizer can only run when an other is failing",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "this",
                "type": "Recognizer"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1269,
            "description": "drop the requireFailure link. it does not remove the link on the other recognizer.",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "this",
                "type": "Recognizer"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1287,
            "description": "has require failures boolean",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1295,
            "description": "if the recognizer can recognize simultaneous with an other recognizer",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1304,
            "description": "You should use `tryEmit` instead of `emit` directly to check\nthat all the needed recognizers has failed before emitting.",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1330,
            "description": "Check that all the require failure recognizers has failed,\nif true, it emits a gesture event,\notherwise, setup the state to FAILED.",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1344,
            "description": "can we emit?",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1359,
            "description": "update the recognizer",
            "params": [
                {
                    "name": "inputData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1389,
            "description": "return the state of the recognizer\nthe actual recognizing happens in this method",
            "virtual": "",
            "params": [
                {
                    "name": "inputData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "STATE",
                "type": "Const"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1398,
            "description": "return the preferred touch-action",
            "virtual": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1405,
            "description": "called when the gesture isn't allowed to recognize\nlike when another is being recognized or it is disabled",
            "virtual": "",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1413,
            "description": "get a usable string, used as event postfix",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Const"
                }
            ],
            "return": {
                "description": "state",
                "type": "String"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1431,
            "description": "direction cons to string",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "Const"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1449,
            "description": "get a recognizer by name if it is bound to a manager",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer|String"
                },
                {
                    "name": "recognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "",
                "type": "Recognizer"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1463,
            "description": "This recognizer is just used as a base for the simple attribute recognizers.",
            "is_constructor": 1,
            "extends": "Recognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1473,
            "memberof": "AttrRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1478,
            "type": "{Number}",
            "default": "1",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1485,
            "description": "Used to check if it the recognizer receives valid input, like input.distance > 10.",
            "memberof": "AttrRecognizer",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "recognized",
                "type": "Boolean"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1496,
            "description": "Process the input and return the state for the recognizer",
            "memberof": "AttrRecognizer",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "State",
                "type": "*"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1524,
            "description": "Pan\nRecognized when the pointer is down and moved in the allowed direction.",
            "is_constructor": 1,
            "extends": "AttrRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1538,
            "memberof": "PanRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1603,
            "description": "Pinch\nRecognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).",
            "is_constructor": 1,
            "extends": "AttrRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1614,
            "memberof": "PinchRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1642,
            "description": "Press\nRecognized when the pointer is down for x ms without any movement.",
            "is_constructor": 1,
            "extends": "Recognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1656,
            "memberof": "PressRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1713,
            "description": "Rotate\nRecognized when two or more pointer are moving in a circular motion.",
            "is_constructor": 1,
            "extends": "AttrRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1724,
            "memberof": "RotateRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1744,
            "description": "Swipe\nRecognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.",
            "is_constructor": 1,
            "extends": "AttrRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1755,
            "memberof": "SwipeRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1799,
            "description": "A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\nbetween the given interval and position. The delay option can be used to recognize multi-taps without firing\na single tap.\n\nThe eventData from the emitted event contains the property `tapCount`, which contains the amount of\nmulti-taps being recognized.",
            "is_constructor": 1,
            "extends": "Recognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1823,
            "memberof": "PinchRecognizer",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1914,
            "description": "Simple way to create an manager with a default set of recognizers.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1926,
            "itemtype": "property",
            "name": "{string}",
            "final": "",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1931,
            "description": "default settings",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1936,
            "description": "set if DOM events are being triggered.\nBut this is slower and unused by simple implementations, so disabled by default.",
            "type": "{Boolean}",
            "default": "false",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1944,
            "description": "The value for the touchAction property/fallback.\nWhen set to `compute` it will magically set the correct value based on the added recognizers.",
            "type": "{String}",
            "default": "compute",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1952,
            "type": "{Boolean}",
            "default": "true",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1958,
            "description": "EXPERIMENTAL FEATURE -- can be removed/changed\nChange the parent input target element.\nIf Null, then it is being set the to main element.",
            "type": "{Null|EventTarget}",
            "default": "null",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1967,
            "description": "force an input class",
            "type": "{Null|Function}",
            "default": "null",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1974,
            "description": "Default recognizer setup when calling `Hammer()`\nWhen creating a new Manager these will be skipped.",
            "type": "{Array}",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1990,
            "description": "Some CSS properties can be used to improve the working of Hammer.\nAdd them to this method and they will be set when creating a new Manager.",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 1996,
            "description": "Disables text selection to improve the dragging gesture. Mainly for desktop browsers.",
            "type": "{String}",
            "default": "'none'",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2003,
            "description": "Disable the Windows Phone grippers when pressing an element.",
            "type": "{String}",
            "default": "'none'",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2010,
            "description": "Disables the default callout shown when you touch and hold a touch target.\nOn iOS, when you touch and hold a touch target such as a link, Safari displays\na callout containing information about the link. This property allows you to disable that callout.",
            "type": "{String}",
            "default": "'none'",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2019,
            "description": "Specifies whether zooming is enabled. Used by IE10>",
            "type": "{String}",
            "default": "'none'",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2026,
            "description": "Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.",
            "type": "{String}",
            "default": "'none'",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2033,
            "description": "Overrides the highlight color shown when the user taps a link or a JavaScript\nclickable element in iOS. This property obeys the alpha value, if specified.",
            "type": "{String}",
            "default": "'rgba(0,0,0,0)'",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2046,
            "description": "Manager",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2076,
            "description": "set options",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Manager"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2097,
            "description": "stop recognizing for this session.\nThis session will be discarded, when a new [input]start event is fired.\nWhen forced, the recognizer cycle is stopped immediately.",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2107,
            "description": "run the recognizers!\ncalled by the inputHandler function on every movement of the pointers (touches)\nit walks through all the recognizers and tries to detect the gesture that is being made",
            "params": [
                {
                    "name": "inputData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2163,
            "description": "get a recognizer by its event name.",
            "params": [
                {
                    "name": "recognizer",
                    "description": "",
                    "type": "Recognizer|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Recognizer|Null"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2182,
            "description": "add a recognizer to the manager\nexisting recognizers with the same event name will be removed",
            "params": [
                {
                    "name": "recognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "",
                "type": "Recognizer|Manager"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2206,
            "description": "remove a recognizer by name or instance",
            "params": [
                {
                    "name": "recognizer",
                    "description": "",
                    "type": "Recognizer|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Manager"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2224,
            "description": "bind event",
            "params": [
                {
                    "name": "events",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventEmitter"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2239,
            "description": "unbind event, leave emit blank to remove all handlers",
            "params": [
                {
                    "name": "events",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "this",
                "type": "EventEmitter"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2257,
            "description": "emit event to the listeners",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2286,
            "description": "destroy the manager and unbinds all events\nit doesn't unbind dom events, that is the user own responsibility",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2300,
            "description": "add/remove the css properties as defined in manager.options.cssProps",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                },
                {
                    "name": "add",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2312,
            "description": "trigger dom event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2459,
            "description": "A reference to the resolver object that handles this promise",
            "itemtype": "property",
            "name": "_resolver",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2480,
            "description": "Schedule execution of a callback to either or both of \"fulfill\" and\n\"reject\" resolutions for this promise. The callbacks are wrapped in a new\npromise and that promise is returned.  This allows operation chaining ala\n`functionA().then(functionB).then(functionC)` where `functionA` returns\na promise, and `functionB` and `functionC` _may_ return promises.\n\nAsynchronicity of the callbacks is guaranteed.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "callback",
                    "description": "function to execute if the promise\n            resolves successfully",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errback",
                    "description": "function to execute if the promise\n            resolves unsuccessfully",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise wrapping the resolution of either \"resolve\" or\n            \"reject\" callback",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2534,
            "description": "Wraps the callback in another function to catch exceptions and turn them\ninto rejections.",
            "itemtype": "method",
            "name": "_makeCallback",
            "params": [
                {
                    "name": "promise",
                    "description": "Promise that will be affected by this callback",
                    "type": "Promise"
                },
                {
                    "name": "fn",
                    "description": "Callback to wrap",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2574,
            "description": "Logs a message. This method is designed to be overwritten with  YUI's `log`\nfunction.",
            "itemtype": "method",
            "name": "_log",
            "params": [
                {
                    "name": "msg",
                    "description": "Message to log",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Log level. One of 'error', 'warn', 'info'.",
                    "type": "String"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2706,
            "description": "Forces a function to be run asynchronously, but as fast as possible. In Node.js\nthis is achieved using `setImmediate` or `process.nextTick`. In YUI this is\nreplaced with `Y.soon`.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call asynchronously",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2732,
            "description": "List of success callbacks",
            "itemtype": "property",
            "name": "_callbacks",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2741,
            "description": "List of failure callbacks",
            "itemtype": "property",
            "name": "_errbacks",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2750,
            "description": "The promise for this Resolver.",
            "itemtype": "property",
            "name": "promise",
            "type": "Promise",
            "deprecated": true,
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2759,
            "description": "The status of the operation. This property may take only one of the following\nvalues: 'pending', 'fulfilled' or 'rejected'.",
            "itemtype": "property",
            "name": "_status",
            "type": "String",
            "default": "'pending'",
            "access": "private",
            "tagname": "",
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2770,
            "description": "This value that this promise represents.",
            "itemtype": "property",
            "name": "_result",
            "type": "Any",
            "access": "private",
            "tagname": "",
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2781,
            "description": "Resolves the promise, signaling successful completion of the\nrepresented operation. All \"onFulfilled\" subscriptions are executed and passed\nthe value provided to this method. After calling `fulfill()`, `reject()` and\n`notify()` are disabled.",
            "itemtype": "method",
            "name": "fulfill",
            "params": [
                {
                    "name": "value",
                    "description": "Value to pass along to the \"onFulfilled\" subscribers",
                    "type": "Any"
                }
            ],
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2815,
            "description": "Resolves the promise, signaling *un*successful completion of the\nrepresented operation. All \"onRejected\" subscriptions are executed with\nthe value provided to this method. After calling `reject()`, `resolve()`\nand `notify()` are disabled.",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "value",
                    "description": "Value to pass along to the \"reject\" subscribers",
                    "type": "Any"
                }
            ],
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2880,
            "description": "If `value` is a promise or a thenable, it will be unwrapped by\nrecursively calling its `then` method. If not, the resolver will be\nfulfilled with `value`.\n\nThis method is called when the promise's `then` method is called and\nnot in `resolve` to allow for lazy promises to be accepted and not\nresolved immediately.",
            "itemtype": "method",
            "name": "_unwrap",
            "params": [
                {
                    "name": "value",
                    "description": "A promise, thenable or regular value",
                    "type": "Any"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2927,
            "description": "Schedule execution of a callback to either or both of \"resolve\" and\n\"reject\" resolutions of this resolver. If the resolver is not pending,\nthe correct callback gets called automatically.",
            "itemtype": "method",
            "name": "_addCallbacks",
            "params": [
                {
                    "name": "callback",
                    "description": "function to execute if the Resolver\n            resolves successfully",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errback",
                    "description": "function to execute if the Resolver\n            resolves unsuccessfully",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 2965,
            "description": "Executes an array of callbacks from a specified context, passing a set of\narguments.",
            "itemtype": "method",
            "name": "_notify",
            "params": [
                {
                    "name": "subs",
                    "description": "The array of subscriber callbacks",
                    "type": "Function[]"
                },
                {
                    "name": "result",
                    "description": "Value to pass the callbacks",
                    "type": "Any"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Promise.Resolver"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3487,
            "description": "Does the actual transportation from DOM-events into the Eventsystem. It also looks at the response of\nthe Eventsystem: on e.halt() or e.preventDefault(), the original DOM-event will be preventDefaulted.",
            "itemtype": "method",
            "name": "_domCallback",
            "params": [
                {
                    "name": "eventName",
                    "description": "the customEvent that is transported to the eventsystem",
                    "type": "String"
                },
                {
                    "name": "e",
                    "description": "eventobject",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3538,
            "description": "The (only) Hammer-instance that `Event` uses. It is bound to the `body`-element.",
            "itemtype": "property",
            "name": "hammertime",
            "type": "Hammer-instance",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-hammerjs"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3551,
            "description": "Adds the `Hammer`-class to Event, so it can be used from within Event.",
            "itemtype": "property",
            "name": "Hammer",
            "type": "Hammer",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-hammerjs"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3589,
            "description": "Is emitted whenever hammerjs detects a gestureevent.\nBy emitting its original event through ParcelaEvent:eventmobile, `event-dom`\nwill catch it and process it through the dom-event cycle.",
            "itemtype": "event",
            "name": "ParcelaEvent:eventmobile",
            "params": [
                {
                    "name": "e",
                    "description": "eventobject",
                    "type": "Object"
                }
            ],
            "since": "0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-hammerjs"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3648,
            "description": "Defines a CustomEvent. If the eventtype already exists, it will not be overridden,\nunless you force to assign with `.forceAssign()`\n\nThe returned object comes with 4 methods which can be invoked chainable:\n\n<ul>\n    <li>defaultFn() --> the default-function of the event</li>\n    <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n    <li>forceAssign() --> overrides any previous definition</li>\n    <li>unHaltable() --> makes the customEvent cannot be halted</li>\n    <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n    <li>unSilencable() --> makes that emitters cannot make this event to perform silently (using e.silent)</li>\n    <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n    <li>noRender() --> prevents this customEvent from render the dom. Overrules unRenderPreventable()</li>\n</ul>",
            "itemtype": "method",
            "name": "defineEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the customEvent, without `emitterName`.\n       The final event that will be created has the syntax: `emitterName:eventName`,\n       where `emitterName:` is automaticly prepended.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "with extra methods that can be chained:\n<ul>\n     <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n     <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n     <li>forceAssign() --> overrides any previous definition</li>\n     <li>defaultFn() --> the default-function of the event</li>\n     <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3683,
            "description": "Emits the event `eventName` on behalf of the instance holding this method.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to be sent (available as e.type)\n       you could pass a customEvent here 'emitterName:eventName', which would\n       overrule the `instance-emitterName`",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "extra payload to be added to the event-object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<ul>\n    <li>on success: returnValue {Any} of the defaultFn</li>\n    <li>on error: reason {Any} Either: description 'event was halted', 'event was defaultPrevented' or the returnvalue of the preventedFn</li>\n</ul>",
                "type": "Promise"
            },
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3702,
            "description": "Removes all event-definitions of the instance holding this method.",
            "itemtype": "method",
            "name": "undefAllEvents",
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3712,
            "description": "Removes the event-definition of the specified customEvent.",
            "itemtype": "method",
            "name": "undefEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the customEvent, without `emitterName`.\n       The calculated customEvent which will be undefined, will have the syntax: `emitterName:eventName`.\n       where `emitterName:` is automaticly prepended.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3757,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3780,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `before` the defaultFn.",
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3803,
            "description": "Detaches (unsubscribes) the listener from the specified customEvent,\non behalf of the object who calls this method.",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3816,
            "description": "Detaches (unsubscribes) the listener from all customevents,\non behalf of the object who calls this method.",
            "itemtype": "method",
            "name": "detachAll",
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3827,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceAfter",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3852,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `before` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceBefore",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3952,
            "description": "Subscribes to a customEvent. The callback will be executed `after` the defaultFn.",
            "static": 1,
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.after() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 3979,
            "description": "Subscribes to a customEvent. The callback will be executed `before` the defaultFn.",
            "static": 1,
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.before() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4006,
            "description": "Defines an emitterName into the instance (emitter).\nThis will add a protected property `_emitterName` to the instance.",
            "static": 1,
            "itemtype": "method",
            "name": "defineEmitter",
            "params": [
                {
                    "name": "emitter",
                    "description": "instance that should hold the emitterName",
                    "type": "Object"
                },
                {
                    "name": "emitterName",
                    "description": "identifier that will be added when events are sent (`emitterName:eventName`)",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4027,
            "description": "Defines a CustomEvent. If the eventtype already exists, it will not be overridden,\nunless you force to assign with `.forceAssign()`\n\nThe returned object comes with 4 methods which can be invoked chainable:\n\n<ul>\n    <li>defaultFn() --> the default-function of the event</li>\n    <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n    <li>forceAssign() --> overrides any previous definition</li>\n    <li>unHaltable() --> makes the customEvent cannot be halted</li>\n    <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n    <li>unSilencable() --> makes that emitters cannot make this event to perform silently (using e.silent)</li>\n    <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n    <li>noRender() --> prevents this customEvent from render the dom. Overrules unRenderPreventable()</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "defineEvent",
            "params": [
                {
                    "name": "customEvent",
                    "description": "name of the customEvent conform the syntax: `emitterName:eventName`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "with extra methods that can be chained:\n<ul>\n     <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n     <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n     <li>forceAssign() --> overrides any previous definition</li>\n     <li>defaultFn() --> the default-function of the event</li>\n     <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4121,
            "description": "Detaches (unsubscribes) the listener from the specified customEvent.",
            "static": 1,
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "listener",
                    "description": "The instance that is going to detach the customEvent.\n       When not passed through (or undefined), all customevents of all instances are detached",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.\n       Can be set as the only argument.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4139,
            "description": "Detaches (unsubscribes) the listener from all customevents.",
            "static": 1,
            "itemtype": "method",
            "name": "detachAll",
            "params": [
                {
                    "name": "listener",
                    "description": "The instance that is going to detach the customEvent",
                    "type": "Object"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4163,
            "description": "Emits the event `eventName` on behalf of `emitter`, which becomes e.target in the eventobject.\nDuring this process, all subscribers and the defaultFn/preventedFn get an eventobject passed through.\nThe eventobject is created with at least these properties:\n\n<ul>\n    <li>e.target --> source that triggered the event (instance or DOM-node), specified by `emitter`</li>\n    <li>e.type --> eventName</li>\n    <li>e.emitter --> emitterName</li>\n    <li>e.status --> status-information:\n         <ul>\n              <li>e.status.ok --> `true|false` whether the event got executed (not halted or defaultPrevented)</li>\n              <li>e.status.defaultFn (optional) --> `true` if any defaultFn got invoked</li>\n              <li>e.status.preventedFn (optional) --> `true` if any preventedFn got invoked</li>\n              <li>e.status.rendered (optional) --> `true` the vDOM rendered the dom</li>\n              <li>e.status.halted (optional) --> `reason|true` if the event got halted and optional the why</li>\n              <li>e.status.defaultPrevented (optional) -->  `reason|true` if the event got defaultPrevented and optional the why</li>\n              <li>e.status.renderPrevented (optional) -->  `reason|true` if the event got renderPrevented and optional the why</li>\n         </ul>\n    </li>\n</ul>\n\nThe optional `payload` is merged into the eventobject and could be used by the subscribers and the defaultFn/preventedFn.\nIf payload.silent is set true, the subscribers are not getting invoked: only the defaultFn.\n\nThe eventobject also has these methods:\n\n<ul>\n    <li>e.halt() --> stops immediate all actions: no mer subscribers are invoked, no defaultFn/preventedFn</li>\n    <li>e.preventDefault() --> instead of invoking defaultFn, preventedFn will be invoked. No aftersubscribers</li>\n    <li>e.preventRender() --> by default, any event will trigger the vDOM (if exists) to re-render, this can be prevented by calling e.preventRender()</li>\n</ul>\n\n<ul>\n    <li>First, before-subscribers are invoked: this is the place where you might call `e.halt()`, `a.preventDefault()` or `e.preventRender()`</li>\n    <li>Next, defaultFn or preventedFn gets invoked, depending on whether e.halt() or a.preventDefault() has been called</li>\n    <li>Next, after-subscribers get invoked (unless e.halt() or a.preventDefault() has been called)</li>\n    <li>Finally, the finalization takes place: any subscribers are invoked, unless e.halt() or a.preventDefault() has been called</li>\n<ul>",
            "static": 1,
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "emitter",
                    "description": "instance that emits the events",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "customEvent",
                    "description": "Full customEvent conform syntax `emitterName:eventName`.\n       `emitterName` is available as **e.emitter**, `eventName` as **e.type**.",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "extra payload to be added to the event-object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "eventobject or undefined when the event was halted or preventDefaulted.",
                "type": "Object|undefined"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4224,
            "description": "Adds a subscriber to the finalization-cycle, which happens after the after-subscribers.\nOnly get invoked when the cycle was not preventDefaulted or halted.",
            "itemtype": "method",
            "name": "finalize",
            "params": [
                {
                    "name": "finallySubscriber",
                    "description": "callback to be invoked\n       Function recieves the eventobject as its only argument",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4247,
            "description": "Creates a notifier for the customEvent.\nYou can use this to create delayed `defineEvents`. When the customEvent is called, the callback gets invoked\n(even before the subsrcibers). Use this callback for delayed customEvent-definitions.\n\nUse **no** wildcards for the emitterName. You might use wildcards for the eventName. Without wildcards, the\nnotification will be unNotified (callback automaticly detached) on the first time the event occurs.\n\nYou **must** specify the full `emitterName:eventName` syntax.\nThe module `core-event-dom` uses `notify` to auto-define DOM-events (UI:*).",
            "static": 1,
            "itemtype": "method",
            "name": "notify",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used only  for`eventName`.\n       If `emitterName` should be defined.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber: will be invoked when the customEvent is called (before any subscribers.\n                Recieves 2 arguments: `customEvent` and the `subscriber-object`.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "context of the callback",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4278,
            "description": "Subscribes to a customEvent. The callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "static": 1,
            "itemtype": "method",
            "name": "onceAfter",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.onceAfter() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4322,
            "description": "Subscribes to a customEvent. The callback will be executed `before` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "static": 1,
            "itemtype": "method",
            "name": "onceBefore",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.onceBefore() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4366,
            "description": "Removes all event-definitions of an emitter, specified by its `emitterName`.\nWhen `emitterName` is not set, ALL event-definitions will be removed.",
            "static": 1,
            "itemtype": "method",
            "name": "undefAllEvents",
            "params": [
                {
                    "name": "emitterName",
                    "description": "name of the customEvent conform the syntax: `emitterName:eventName`",
                    "type": "String",
                    "optional": true
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4396,
            "description": "Removes the event-definition of the specified customEvent.",
            "static": 1,
            "itemtype": "method",
            "name": "undefEvent",
            "params": [
                {
                    "name": "customEvent",
                    "description": "name of the customEvent conform the syntax: `emitterName:eventName`",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4409,
            "description": "unNotifies (unsubscribes) the notifier of the specified customEvent.",
            "static": 1,
            "itemtype": "method",
            "name": "unNotify",
            "params": [
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4426,
            "description": "Creates a subscriber to the specified customEvent. The customEvent must conform the syntax:\n`emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`\nIf `emitterName` is not defined, `UI` is assumed.\n\nExamples of valid customevents:\n\n<ul>\n    <li>'redmodel:save'</li>\n    <li>'UI:click'</li>\n    <li>'click' --> alias for 'UI:click'</li>\n    <li>'`*`:click' --> careful: will listen to both UIs and non-UI- click-events</li>\n    <li>'redmodel:`*`'</li>\n    <li>'`*`:`*`'</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "_addMultiSubs",
            "params": [
                {
                    "name": "before",
                    "description": "whether the subscriber is a `before` subscriber. On falsy, an `after`-subscriber is assumed.",
                    "type": "Boolean"
                },
                {
                    "name": "customEvent",
                    "description": "Array of Strings. customEvent should conform the syntax: `emitterName:eventName`, wildcard `*`\n        may be used for both `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber to the event.",
                    "type": "Function"
                },
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether to make the subscriber the first in the list. By default it will pe appended.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4496,
            "description": "Creates a subscriber to the specified customEvent. The customEvent must conform the syntax:\n`emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`\nIf `emitterName` is not defined, `UI` is assumed.\n\nExamples of valid customevents:\n\n<ul>\n    <li>'redmodel:save'</li>\n    <li>'UI:click'</li>\n    <li>'click' --> alias for 'UI:click'</li>\n    <li>'`*`:click' --> careful: will listen to both UIs and non-UI- click-events</li>\n    <li>'redmodel:`*`'</li>\n    <li>'`*`:`*`'</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "_addSubscriber",
            "params": [
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "before",
                    "description": "whether the subscriber is a `before` subscriber. On falsy, an `after`-subscriber is assumed.",
                    "type": "Boolean"
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "subscriber to the event.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether to make the subscriber the first in the list. By default it will pe appended.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4585,
            "description": "Emits the event `eventName` on behalf of `emitter`, which becomes e.target in the eventobject.\nDuring this process, all subscribers and the defaultFn/preventedFn get an eventobject passed through.\nThe eventobject is created with at least these properties:\n\n<ul>\n    <li>e.target --> source that triggered the event (instance or DOM-node), specified by `emitter`</li>\n    <li>e.type --> eventName</li>\n    <li>e.emitter --> emitterName</li>\n    <li>e.status --> status-information:\n         <ul>\n              <li>e.status.ok --> `true|false` whether the event got executed (not halted or defaultPrevented)</li>\n              <li>e.status.defaultFn (optional) --> `true` if any defaultFn got invoked</li>\n              <li>e.status.preventedFn (optional) --> `true` if any preventedFn got invoked</li>\n              <li>e.status.rendered (optional) --> `true` the vDOM rendered the dom</li>\n              <li>e.status.halted (optional) --> `reason|true` if the event got halted and optional the why</li>\n              <li>e.status.defaultPrevented (optional) -->  `reason|true` if the event got defaultPrevented and optional the why</li>\n              <li>e.status.renderPrevented (optional) -->  `reason|true` if the event got renderPrevented and optional the why</li>\n         </ul>\n    </li>\n</ul>\n\nThe optional `payload` is merged into the eventobject and could be used by the subscribers and the defaultFn/preventedFn.\nIf payload.silent is set true, the subscribers are not getting invoked: only the defaultFn.\n\nThe eventobject also has these methods:\n\n<ul>\n    <li>e.halt() --> stops immediate all actions: no mer subscribers are invoked, no defaultFn/preventedFn</li>\n    <li>e.preventDefault() --> instead of invoking defaultFn, preventedFn will be invoked. No aftersubscribers</li>\n    <li>e.preventRender() --> by default, any event will trigger the vDOM (if exists) to re-render, this can be prevented by calling e.preventRender()</li>\n</ul>\n\n<ul>\n    <li>First, before-subscribers are invoked: this is the place where you might call `e.halt()`, `a.preventDefault()` or `e.preventRender()`</li>\n    <li>Next, defaultFn or preventedFn gets invoked, depending on whether e.halt() or a.preventDefault() has been called</li>\n    <li>Next, after-subscribers get invoked (unless e.halt() or a.preventDefault() has been called)</li>\n    <li>Finally, the finalization takes place: any subscribers are invoked, unless e.halt() or a.preventDefault() has been called</li>\n<ul>",
            "static": 1,
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "emitter",
                    "description": "instance that emits the events",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "customEvent",
                    "description": "Full customEvent conform syntax `emitterName:eventName`.\n       `emitterName` is available as **e.emitter**, `eventName` as **e.type**.",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "extra payload to be added to the event-object",
                    "type": "Object"
                },
                {
                    "name": "beforeSubscribers",
                    "description": "array of functions to act as beforesubscribers. <b>should not be used</b> other than\n                           by any submodule like `event-dom`. If used, than this list of subscribers gets invoked instead\n                           of the subscribers that actually subscribed to the event.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "afterSubscribers",
                    "description": "array of functions to act as afterSubscribers. <b>should not be used</b> other than\n                           by any submodule like `event-dom`. If used, than this list of subscribers gets invoked instead\n                           of the subscribers that actually subscribed to the event.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "preProcessor",
                    "description": "if passed, this function will be invoked before every single subscriber\n                      It is meant to manipulate the eventobject, something that `event-dom` needs to do\n                      This function expects 2 arguments: `subscriber` and `eventobject`.\n                      <b>should not be used</b> other than by any submodule like `event-dom`.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "keepPayload",
                    "description": "whether `payload` should be used as the ventobject instead of creating a new\n                     eventobject and merge payload. <b>should not be used</b> other than by any submodule like `event-dom`.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "eventobject or undefined when the event was halted or preventDefaulted.",
                "type": "Object|undefined"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4741,
            "description": "Does the actual invocation of a subscriber.",
            "itemtype": "method",
            "name": "_invokeSubs",
            "params": [
                {
                    "name": "e",
                    "description": "event-object",
                    "type": "Object"
                },
                {
                    "name": "checkFilter",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "before",
                    "description": "whether it concerns before subscribers",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "checkFilter",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "subscribers",
                    "description": "contains subscribers (objects) with these members:\n<ul>\n    <li>subscriber.o {Object} context of the callback</li>\n    <li>subscriber.cb {Function} callback to be invoked</li>\n    <li>subscriber.f {Function} filter to be applied</li>\n    <li>subscriber.t {DOM-node} target for the specific selector, which will be set as e.target\n        only when event-dom is active and there are filter-selectors</li>\n    <li>subscriber.n {DOM-node} highest dom-node that acts as the container for delegation.\n        only when event-dom is active and there are filter-selectors</li>\n</ul>",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4787,
            "description": "Removes a subscriber from the specified customEvent. The customEvent must conform the syntax:\n`emitterName:eventName`.",
            "static": 1,
            "itemtype": "method",
            "name": "_removeSubscriber",
            "params": [
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "before",
                    "description": "whether the subscriber is a `before` subscriber. On falsy, an `after`-subscriber is assumed.",
                    "type": "Boolean"
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emmiterName.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "subscriber to the event, when not set, all subscribers of the listener to this customEvent\n                  will be removed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4833,
            "description": "Removes subscribers from the multiple customevents. The customEvent must conform the syntax:\n`emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`\nIf `emitterName` is not defined, `UI` is assumed.\n\nExamples of valid customevents:\n\n<ul>\n    <li>'redmodel:save'</li>\n    <li>'UI:click'</li>\n    <li>'click' --> alias for 'UI:click'</li>\n    <li>'`*`:click' --> careful: will listen to both UIs and non-UI- click-events</li>\n    <li>'redmodel:`*`'</li>\n    <li>'`*`:`*`'</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "_removeSubscriber",
            "params": [
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emmiterName.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4888,
            "description": "Adds a property to the default eventobject's prototype which passes through all eventcycles.\nGoes through Object.defineProperty with configurable, enumerable and writable\nall set to false.",
            "itemtype": "method",
            "name": "_setEventObjProperty",
            "params": [
                {
                    "name": "property",
                    "description": "event-object",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4908,
            "description": "Objecthash containing all defined custom-events\nwhich has a structure like this:\n\n_ce = {\n    'UI:click': {\n        preventable: true,\n        defaultFn: function(){...},\n        preventedFn: function(){...},\n        renderPreventable: true\n    },\n    'redmodel:save': {\n        preventable: true,\n        defaultFn: function(){...},\n        preventedFn: function(){...},\n        renderPreventable: true\n    }\n}",
            "itemtype": "property",
            "name": "_ce",
            "default": "{}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4940,
            "description": "Objecthash containing all defined before and after subscribers\nwhich has a structure like this (`b` represents `before` and `a` represents `after`)\nEvery item that gets in the array consist by itself of 3 properties:\n                                                         subscriberitem = {\n                                                             o: listener,\n                                                             cb: callbackFn(e),\n                                                             f: filter\n                                                         };\n\n_subs = {\n    'UI:click': {\n        b: [\n            item,\n            item\n        ],\n        a: [\n            item,\n            item\n        ]\n    },\n    '*:click': {\n        b: [\n            item,\n            item\n        ],\n        a: [\n            item,\n            item\n        ]\n    },\n    'redmodel:save': {\n        b: [\n            item,\n            item\n        ],\n        a: [\n            item,\n            item\n        ]\n    }\n}",
            "itemtype": "property",
            "name": "_ce",
            "default": "{}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 4991,
            "description": "Internal list of finalize-subscribers which are invoked at the finalization-cycle, which happens after the after-subscribers.\nIs an array of function-references.",
            "itemtype": "property",
            "name": "_final",
            "default": "[]",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5003,
            "description": "Object that acts as the prototype of the eventobject.\nTo add more methods, you can use `_setEventObjProperty`",
            "itemtype": "property",
            "name": "_defaultEventObj",
            "default": "{\n   halt: function()\n   preventDefault: function()\n   preventRender: function()\n}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5019,
            "description": "Objecthash containing all notifiers, keyed by customEvent name.\nThis list is maintained by `notify`, `unNotify` and `unNotifyAll`\n\n_notifiers = {\n    'UI:click': {\n        cb:function() {}\n        o: {} // context\n    },\n    'redmodel:*': {\n        cb:function() {}\n        o: {} // context\n    },\n    'bluemodel:save': {\n        cb:function() {}\n        o: {} // context\n    }\n}",
            "itemtype": "property",
            "name": "_notifiers",
            "default": "{}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5100,
            "description": "Merges the given map of properties into the `prototype` of the Class.\n**Not** to be used on instances.\n\nThe members in the hash map will become members with\ninstances of the merged class.\n\nBy default, this method will not override existing prototype members,\nunless the second argument `force` is true.",
            "itemtype": "method",
            "name": "mergePrototypes",
            "params": [
                {
                    "name": "map",
                    "description": "Hash map of properties to add to the prototype of this object",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "If true, existing members will be overwritten",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Function",
            "module": "extend-js",
            "submodule": "extend-function"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5131,
            "description": "Returns a newly created class inheriting from this class\nusing the given `constructor` with the\nprototypes listed in `prototypes` merged in.\n\n\nThe newly created class has the `$super` static property\navailable to access all of is ancestor's instance methods.\n\nFurther methods can be added via the [mergePrototypes](#method_mergePrototypes).",
            "example": [
                "\n\n\tvar Circle = Shape.subClass(\n\t\tfunction (x, y, r) {\n\t\t\tthis.r = r;\n\t\t\tCircle.$super.constructor.call(this, x, y);\n\t\t},\n\t\t{\n\t\t\tarea: function () {\n\t\t\t\treturn this.r * this.r * Math.PI;\n\t\t\t}\n\t\t}\n\t);"
            ],
            "itemtype": "method",
            "name": "subClass",
            "params": [
                {
                    "name": "constructor",
                    "description": "The function that will serve as constructor for the new class.\n       If `undefined` defaults to `Object.constructor`",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "prototypes",
                    "description": "Hash map of properties to be added to the prototype of the new class.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new class."
            },
            "class": "Function",
            "module": "extend-js",
            "submodule": "extend-function"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5189,
            "description": "Overwrites the given prototype functions with the ones given in\nthe hashmap while still providing a means of calling the original\noverridden method.\n\nThe patching function will receive a reference to the original method\nprepended to the arguments the original would have received.",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "map",
                    "description": "Hash map of method names to their new implementation.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Function",
            "module": "extend-js",
            "submodule": "extend-function"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5223,
            "description": "Sets the context of which the function will be execute. in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.",
            "itemtype": "method",
            "name": "rbind",
            "params": [
                {
                    "name": "context",
                    "description": "the execution context.\n       The value is ignored if the bound function is constructed using the new operator.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "args*",
                    "description": "args* 0..n arguments to append to the end of\n       arguments collection supplied to the function.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "return": {
                "description": "the wrapped function.",
                "type": "Function"
            },
            "class": "Function",
            "module": "extend-js",
            "submodule": "extend-function"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5259,
            "description": "Returns a base class with the given constructor and prototype methods",
            "itemtype": "method",
            "name": "createClass",
            "params": [
                {
                    "name": "constructor",
                    "description": "constructor for the class",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "prototype",
                    "description": "Hash map of prototype members of the new class",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new class",
                "type": "Function"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-function"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5322,
            "description": "Loops through all properties in the object.  Equivalent to Array.forEach.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5349,
            "description": "Loops through the properties in an object until the callback function returns *truish*.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe order in which the elements are visited is not predictable.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "true if the loop was interrupted by the callback function returning *truish*.",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5377,
            "description": "Loops through the properties in an object until the callback assembling a new object\nwith its properties set to the values returned by the callback function.\nIf the callback function returns `undefined` the property will not be copied to the new object.\nThe resulting object will have the same keys as the original, except for those where the callback\nreturned `undefined` which will have dissapeared.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The new object with its properties set to the values returned by the callback function.",
                "type": "Object"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5409,
            "description": "Returns the keys of the object.",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "Keys of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5418,
            "description": "Loops through the object collection the values of all its properties.\nIt is the counterpart of the [`keys`](#method_keys).",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "values of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5438,
            "description": "Returns true if the object has no own members",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "true if the object is empty",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5451,
            "description": "Returns a shallow copy of the object.\nIt does not clone objects within the object, it does a simple, shallow clone.\nFast, mostly useful for plain hash maps.",
            "itemtype": "method",
            "name": "shallowClone",
            "return": {
                "description": "shallow copy of the original",
                "type": "Object"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5472,
            "description": "Merges into this object the properties of the given object.\nIf the second argument is true, the properties on the source object will be overwritten\nby those of the second object of the same name, otherwise, they are preserved.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "obj",
                    "description": "Object with the properties to be added to the original object",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "If true, the properties in `obj` will override those of the same name\n       in the original object",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5497,
            "description": "Returns a new object resulting of merging the properties of the given objects.\nThe copying is shallow, complex properties will reference the very same object.\nProperties in later objects do **not overwrite** properties of the same name in earlier objects.\nIf any of the objects is missing, it will be skiped.",
            "example": [
                "\n\n var foo = function (config) {\n      config = Object.merge(config, defaultConfig);\n }"
            ],
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "Objects whose properties are to be merged",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "return": {
                "description": "new object with the properties merged in.",
                "type": "Object"
            },
            "class": "Object",
            "module": "extend-js",
            "submodule": "extend-object"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5540,
            "description": "Returns a Promise that always fulfills. It is fulfilled when ALL items are resolved (either fulfilled\nor rejected). This is useful for waiting for the resolution of multiple\npromises, such as reading multiple files in Node.js or making multiple XHR\nrequests in the browser. Because -on the contrary of `Promise.all`- **finishAll** waits until\nall single Promises are resolved, you can handle all promises, even if some gets rejected.",
            "itemtype": "method",
            "name": "finishAll",
            "params": [
                {
                    "name": "items",
                    "description": "an array of any kind of items, promises or not. If a value is not a promise,\nits transformed into a resolved promise.",
                    "type": "Any[]"
                }
            ],
            "return": {
                "description": "A promise for an array of all the fulfillment items:\n<ul>\n    <li>Fulfilled: o {Object}\n        <ul>\n            <li>fulfilled {Array} all fulfilled responses, any item that was rejected will have a value of `undefined`</li>\n            <li>rejected {Array} all rejected responses, any item that was fulfilled will have a value of `undefined`</li>\n        </ul>\n    </li>\n    <li>Rejected: this promise **never** rejects</li>\n</ul>",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "extend-js",
            "submodule": "extend-promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5604,
            "description": "Returns a Promise which chains the function-calls. Like an automated Promise-chain.\nInvokes the functionreferences in a chain. You MUST supply function-references, it doesn't\nmatter wheter these functions return a Promise or not. Any returnvalues are passed through to\nthe next function.\n\n**Cautious:** you need to pass function-references, not invoke them!\nchainFns will invoke them when the time is ready. Regarding to this, there is a difference with\nusing Promise.all() where you should pass invoked Promises.\n\nIf one of the functions returns a Promise, the chain\nwill wait its execution for this function to be resolved.\n\nIf you need specific context or arguments: use Function.bind for these items.\nIf one of the items returns a rejected Promise, by default: the whole chain rejects\nand following functions in the chain will not be invoked. When `finishAll` is set `true`\nthe chain will always continue even with rejected Promises.\n\nReturning functionvalues are passed through the chain adding them as an extra argument\nto the next function in the chain (argument is added on the right)",
            "example": [
                "\n    var a = [], p1, p2, p3;\n    p1 = function(a) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                console.log('resolving promise p1: '+a);\n                resolve(a);\n            }, 1000);\n        });\n    };\n    p2 = function(b, r) {\n        var value = b+r;\n        console.log('returning p2: '+value);\n        return value;\n    };\n    p3 = function(c, r) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                var value = b+r;\n                console.log('resolving promise p3: '+value);\n                resolve(value);\n            }, 1000);\n        });\n    };\n    a.push(p1.bind(undefined, 100));\n    a.push(p2.bind(undefined, 200));\n    a.push(p3.bind(undefined, 300));\n    Promise.chainFns(a).then(\n        function(r) {\n            console.log('chain resolved with '+r);\n        },\n        function(err) {\n            console.log('chain-error '+err);\n        }\n    );"
            ],
            "itemtype": "method",
            "name": "chainFns",
            "params": [
                {
                    "name": "funcs",
                    "description": "an array of function-references",
                    "type": "Function[]"
                },
                {
                    "name": "finishAll",
                    "description": "to force the chain to continue, even if one of the functions\n       returns a rejected Promise",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "on success:\no {Object} returnvalue of the laste item in the Promisechain\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "extend-js",
            "submodule": "extend-promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5696,
            "description": "Promise which can be put at the very end of a chain, even after .catch().\nWill invoke the callback function regardless whether the chain resolves or rejects.\n\nThe argument of the callback will be either its fulfilled or rejected argument, but\nit is wisely not to handle it. The results should have been handled in an earlier step\nof the chain: .finally() basicly means you want to execute code after the chain, regardless\nwhether it's resolved or rejected.\n\n**Note:** .finally() <u>does not return a Promise</u>: it should be used as the very last step of a Promisechain.\nIf you need an intermediate method, you should take .thenFulfill().",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "finallyback",
                    "description": "the callbackfunctio to be invoked.",
                    "type": "Function"
                }
            ],
            "class": "Promise",
            "module": "extend-js",
            "submodule": "extend-promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5716,
            "description": "Will always return a fulfilled Promise.\n\nTypical usage will be by making it part of a Promisechain: it makes the chain go\ninto its fulfilled phase.",
            "example": [
                "\n\npromise1\n.then(promise2)\n.thenFulfill()\n.then(handleFulfilled, handleRejected) // handleFulfilled always gets invoked"
            ],
            "itemtype": "method",
            "name": "thenFulfill",
            "params": [
                {
                    "name": "response",
                    "description": "parameter to pass through which overrules the original Promise-response.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Resolved Promise. `response` will be passed trough as parameter when set.\n        When not set: in case the original Promise resolved, its parameter is passed through.\n        in case of a rejection, no parameter will be passed through.",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "extend-js",
            "submodule": "extend-promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5746,
            "description": "Returns a Promise with 3 additional methods:\n\npromise.fulfill\npromise.reject\npromise.callback\n\nWith Promise.manage, you get a Promise which is managable from outside, not inside as Promise A+ work.\nYou can invoke promise.**callback**() which will invoke the original passed-in callbackFn - if any.\npromise.**fulfill**() and promise.**reject**() are meant to resolve the promise from outside, just like deferred can do.",
            "example": [
                "\n    var promise = Promise.manage(\n        function(msg) {\n            alert(msg);\n        }\n    );\n\n    promise.then(\n        function() {\n            // promise is fulfilled, no further actions can be taken\n        }\n    );\n\n    setTimeout(function() {\n        promise.callback('hey, I\\'m still busy');\n    }, 1000);\n\n    setTimeout(function() {\n        promise.fulfill();\n    }, 2000);"
            ],
            "itemtype": "method",
            "name": "manage",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "invoked everytime promiseinstance.callback() is called.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "with three handles: fulfill, reject and callback.",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "extend-js",
            "submodule": "extend-promise"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5904,
            "description": "Initializes the xhr-instance, based on the config-params.\nThis method is the standard way of doing xhr-requests without processing streams.",
            "itemtype": "method",
            "name": "_initXHR",
            "params": [
                {
                    "name": "xhr",
                    "description": "xhr-instance",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.\n          This feature only works in the browser: nodejs will always perform asynchronous requests.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "data",
                            "description": "Data to be sent to the server, either to be used by `query-params` or `body`.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "Force the response type.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "fulfill",
                    "description": "reference to xhr-promise's fulfill-function",
                    "type": "Function"
                },
                {
                    "name": "reject",
                    "description": "reference to xhr-promise's reject-function",
                    "type": "Function"
                },
                {
                    "name": "promise",
                    "description": "the xhr-promise which will be extended with the `abort()`-method",
                    "type": "Promise"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 5985,
            "description": "Adds the `headers`-object to `xhr`-headers.",
            "itemtype": "method",
            "name": "_setHeaders",
            "params": [
                {
                    "name": "xhr",
                    "description": "containing the xhr-instance",
                    "type": "Object"
                },
                {
                    "name": "headers",
                    "description": "containing all headers",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "the request-method used",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6015,
            "description": "Adds 2 methods on the xhr-instance which are used by xhr when events occur:\n\nxhr.onreadystatechange()\nxhr.ontimeout()  // only XMLHttpRequest2\n\nThese events are responsible for making the Promise resolve.",
            "itemtype": "method",
            "name": "_setReadyHandle",
            "params": [
                {
                    "name": "xhr",
                    "description": "containing the xhr-instance",
                    "type": "Object"
                },
                {
                    "name": "fulfill",
                    "description": "reference to the Promise fulfill-function",
                    "type": "Function"
                },
                {
                    "name": "reject",
                    "description": "reference to the Promise reject-function",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6053,
            "description": "Stringifies an object into one string with every pair separated by `&`",
            "itemtype": "method",
            "name": "_toQueryString",
            "params": [
                {
                    "name": "data",
                    "description": "containing key-value pairs",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "stringified presentation of the object, with every pair separated by `&`",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6074,
            "description": "Sends a HTTP request to the server and returns a Promise with an additional .abort() method to cancel the request.\nThis method is the standard way of doing xhr-requests without processing streams.",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "data",
                            "description": "Data to be sent to the server, either to be used by `query-params` or `body`.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "Force the response type.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "streamback",
                            "description": "callbackfunction in case you want to process streams (needs io-stream module).",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\n<ul>\n    <li>on success: xhr {XMLHttpRequest1|XMLHttpRequest2} xhr-response</li>\n    <li>on failure: reason {Error}</li>\n</ul>",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6171,
            "description": "Generates an unique id with the signature: \"namespace-follownr\"",
            "example": [
                "\n\n    var generator = require('core-utils-idgenerator');\n\n    console.log(generator()); // --> 1\n    console.log(generator()); // --> 2\n    console.log(generator(1000)); // --> 1000\n    console.log(generator()); // --> 1001\n    console.log(generator('Parcel, 500')); // -->\"Parcel-500\"\n    console.log(generator('Parcel')); // -->\"Parcel-501\""
            ],
            "itemtype": "method",
            "name": "idGenerator",
            "params": [
                {
                    "name": "namespace",
                    "description": "namespace to prepend the generated id.\n       When ignored, the generator just returns a number.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "startvalue for the next generated id. Any further generated id's will preceed this id.\n       If `start` is lower or equal than the last generated id, it will be ignored.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "an unique id. Either a number, or a String (digit prepended with \"namespace-\")",
                "type": "Number|String"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6220,
            "description": "Forces a function to be run asynchronously, but as fast as possible. In Node.js\nthis is achieved using `setImmediate` or `process.nextTick`.",
            "itemtype": "method",
            "name": "_asynchronizer",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "The function to call asynchronously",
                    "type": "Function"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6236,
            "description": "Invokes the callbackFn once in the next turn of the JavaScript event loop. If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nI.async returns an object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6271,
            "description": "Invokes the callbackFn after a timeout (asynchronous). If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nTo invoke the callback function periodic, set 'periodic' either 'true', or specify a second timeout.\nIf number, then periodic is considered 'true' but with a perdiod defined by 'periodic',\nwhich means: the first timer executes after 'timeout' and next timers after 'period'.\n\nI.later returns an object with a cancel method.  If the cancel() method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "later",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "the function to execute.",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "the number of milliseconds to wait until the callbackFn is executed.\nwhen not set, the callback function is invoked once in the next turn of the JavaScript event loop.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "periodic",
                    "description": "if true, executes continuously at supplied, if number, then periodic is considered 'true' but with a perdiod\ndefined by 'periodic', which means: the first timer executes after 'timeout' and next timers after 'period'.\nThe interval executes until canceled.",
                    "type": "Boolean|Number",
                    "optional": true
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "a timer object. Call the cancel() method on this object to stop the timer.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6360,
            "description": "Improved version of the `typeof` operator, distinguishes Arrays, Date and nulls from Object.\n\nReturns one of the following strings, representing the type of the item passed in:\n\n\"array\"\n\"boolean\"\n\"date\"\n\"error\"\n\"function\"\n\"null\"\n\"number\"\n\"object\"\n\"regexp\"\n\"string\"\n\"undefined\"",
            "itemtype": "method",
            "name": "typeOf",
            "params": [
                {
                    "name": "o",
                    "description": "the item to test.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "the detected type.",
                "type": "String"
            },
            "static": 1,
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6521,
            "description": "Global configuration properties for the ITSA object.\nIt can only be set on initialization via the [`ITSA`](#docs-main) function.\n\nThe config is set at a default-configutation",
            "itemtype": "property",
            "name": "_config",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "ITSA",
            "module": "ITSA"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6549,
            "description": "Reference to the `idGenerator` function in [utils](../modules/utils.html)",
            "itemtype": "property",
            "name": "idGenerator",
            "type": "function",
            "static": 1,
            "class": "ITSA",
            "module": "ITSA"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6556,
            "description": "Reference to the `typeOf` function in [utils](../modules/utils.html)",
            "itemtype": "property",
            "name": "typeOf",
            "type": "function",
            "static": 1,
            "class": "ITSA",
            "module": "ITSA"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6565,
            "description": "Reference to the [IO](io.html) object",
            "itemtype": "property",
            "name": "IO",
            "type": "Object",
            "static": 1,
            "class": "ITSA",
            "module": "ITSA"
        },
        {
            "file": "dist/itsabuild.js",
            "line": 6574,
            "description": "[Event](Event.html)-instance",
            "itemtype": "property",
            "name": "Event",
            "type": "Event",
            "static": 1,
            "class": "ITSA",
            "module": "ITSA"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:14"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:25"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:70"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:90"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:146"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:207"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:238"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:247"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:281"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:304"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:313"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:354"
        },
        {
            "message": "unknown tag: virtual",
            "line": " dist/itsabuild.js:381"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:569"
        },
        {
            "message": "unknown tag: this",
            "line": " dist/itsabuild.js:898"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:898"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1053"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1108"
        },
        {
            "message": "unknown tag: virtual",
            "line": " dist/itsabuild.js:1197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1216"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1235"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1250"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1269"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1287"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1295"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1344"
        },
        {
            "message": "unknown tag: virtual",
            "line": " dist/itsabuild.js:1389"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1389"
        },
        {
            "message": "unknown tag: virtual",
            "line": " dist/itsabuild.js:1398"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1398"
        },
        {
            "message": "unknown tag: virtual",
            "line": " dist/itsabuild.js:1405"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1413"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1431"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1449"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1473"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1485"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1485"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1496"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:1496"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1538"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1614"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1656"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1724"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1755"
        },
        {
            "message": "unknown tag: memberof",
            "line": " dist/itsabuild.js:1823"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:2076"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:2163"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:2182"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:2206"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:2224"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/itsabuild.js:2239"
        },
        {
            "message": "Missing item type\nset a timeout with a given scope",
            "line": " dist/itsabuild.js:14"
        },
        {
            "message": "Missing item type\nif the argument is an array, we want to execute the fn on each entry\nif it aint an array we don't want to do a thing.\nthis is used by all the methods that accept a single and array argument.",
            "line": " dist/itsabuild.js:25"
        },
        {
            "message": "Missing item type\nwalk objects and arrays",
            "line": " dist/itsabuild.js:42"
        },
        {
            "message": "Missing item type\nextend object.\nmeans that properties in dest will be overwritten by the ones in src.",
            "line": " dist/itsabuild.js:70"
        },
        {
            "message": "Missing item type\nmerge the values from src in the dest.\nmeans that properties that exist in dest will not be overwritten by src",
            "line": " dist/itsabuild.js:90"
        },
        {
            "message": "Missing item type\nsimple class inheritance",
            "line": " dist/itsabuild.js:101"
        },
        {
            "message": "Missing item type\nsimple function bind",
            "line": " dist/itsabuild.js:120"
        },
        {
            "message": "Missing item type\nlet a boolean value also be a function that must return a boolean\nthis first item in args will be used as the context",
            "line": " dist/itsabuild.js:132"
        },
        {
            "message": "Missing item type\nuse the val2 when val1 is undefined",
            "line": " dist/itsabuild.js:146"
        },
        {
            "message": "Missing item type\naddEventListener with multiple events at once",
            "line": " dist/itsabuild.js:156"
        },
        {
            "message": "Missing item type\nremoveEventListener with multiple events at once",
            "line": " dist/itsabuild.js:168"
        },
        {
            "message": "Missing item type\nsmall indexOf wrapper",
            "line": " dist/itsabuild.js:197"
        },
        {
            "message": "Missing item type\nsplit string on whitespace",
            "line": " dist/itsabuild.js:207"
        },
        {
            "message": "Missing item type\nfind if a array contains the object using indexOf or a simple polyFill",
            "line": " dist/itsabuild.js:216"
        },
        {
            "message": "Missing item type\nconvert array-like objects to real arrays",
            "line": " dist/itsabuild.js:238"
        },
        {
            "message": "Missing item type\nunique array with objects based on a key (like 'id') or just by the array's value",
            "line": " dist/itsabuild.js:247"
        },
        {
            "message": "Missing item type\nget the prefixed property",
            "line": " dist/itsabuild.js:281"
        },
        {
            "message": "Missing item type\nget a unique id",
            "line": " dist/itsabuild.js:304"
        },
        {
            "message": "Missing item type\nget the window object of an element",
            "line": " dist/itsabuild.js:313"
        },
        {
            "message": "Missing item type\ncreate new input type manager",
            "line": " dist/itsabuild.js:354"
        },
        {
            "message": "Missing item type\nshould handle the inputEvent data and trigger the callback",
            "line": " dist/itsabuild.js:381"
        },
        {
            "message": "Missing item type\nbind the events",
            "line": " dist/itsabuild.js:387"
        },
        {
            "message": "Missing item type\nunbind the events",
            "line": " dist/itsabuild.js:396"
        },
        {
            "message": "Missing item type\ncreate new input type manager\ncalled by the Manager constructor",
            "line": " dist/itsabuild.js:406"
        },
        {
            "message": "Missing item type\nhandle input events",
            "line": " dist/itsabuild.js:430"
        },
        {
            "message": "Missing item type\nextend the data with some usable properties like scale, rotate, velocity etc",
            "line": " dist/itsabuild.js:463"
        },
        {
            "message": "Missing item type\nvelocity is calculated every x ms",
            "line": " dist/itsabuild.js:534"
        },
        {
            "message": "Missing item type\ncreate a simple clone from the input used for storage of firstInput and firstMultiple",
            "line": " dist/itsabuild.js:569"
        },
        {
            "message": "Missing item type\nget the center of all the pointers",
            "line": " dist/itsabuild.js:596"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points. unit is in px per ms.",
            "line": " dist/itsabuild.js:627"
        },
        {
            "message": "Missing item type\nget the direction between two points",
            "line": " dist/itsabuild.js:641"
        },
        {
            "message": "Missing item type\ncalculate the absolute distance between two points",
            "line": " dist/itsabuild.js:658"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " dist/itsabuild.js:675"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two pointersets",
            "line": " dist/itsabuild.js:691"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two pointersets\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " dist/itsabuild.js:701"
        },
        {
            "message": "Missing item type\nMouse events input",
            "line": " dist/itsabuild.js:721"
        },
        {
            "message": "Missing item type\nhandle mouse events",
            "line": " dist/itsabuild.js:737"
        },
        {
            "message": "Missing item type\nPointer events input",
            "line": " dist/itsabuild.js:796"
        },
        {
            "message": "Missing item type\nhandle mouse events",
            "line": " dist/itsabuild.js:811"
        },
        {
            "message": "Missing item type\nTouch events input",
            "line": " dist/itsabuild.js:865"
        },
        {
            "message": "Missing item type\nhandle touch events",
            "line": " dist/itsabuild.js:878"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:898"
        },
        {
            "message": "Missing item type\nCombined touch and mouse input\n\nTouch has a higher priority then mouse, and while touching no mouse events are allowed.\nThis because touch devices also emit mouse events while doing a touch.",
            "line": " dist/itsabuild.js:953"
        },
        {
            "message": "Missing item type\nhandle mouse and touch events",
            "line": " dist/itsabuild.js:971"
        },
        {
            "message": "Missing item type\nremove the event listeners",
            "line": " dist/itsabuild.js:997"
        },
        {
            "message": "Missing item type\nTouch Action\nsets the touchAction property or uses the js alternative",
            "line": " dist/itsabuild.js:1017"
        },
        {
            "message": "Missing item type\nset the touchAction value on the element or enable the polyfill",
            "line": " dist/itsabuild.js:1030"
        },
        {
            "message": "Missing item type\njust re-set the touchAction value",
            "line": " dist/itsabuild.js:1046"
        },
        {
            "message": "Missing item type\ncompute the value for the touchAction property based on the recognizer's settings",
            "line": " dist/itsabuild.js:1053"
        },
        {
            "message": "Missing item type\nthis method is called on each input cycle and provides the preventing of the browser behavior",
            "line": " dist/itsabuild.js:1067"
        },
        {
            "message": "Missing item type\ncall preventDefault to prevent the browser's default behavior (scrolling in most cases)",
            "line": " dist/itsabuild.js:1098"
        },
        {
            "message": "Missing item type\nwhen the touchActions are collected they are not a valid value, so we need to clean things up. *",
            "line": " dist/itsabuild.js:1108"
        },
        {
            "message": "Missing item type\nRecognizer flow explained; *\nAll recognizers have the initial state of POSSIBLE when a input session starts.\nThe definition of a input session is from the first input until the last input, with all it's movement in it. *\nExample session for mouse-input: mousedown -> mousemove -> mouseup\n\nOn each recognizing cycle (see Manager.recognize) the .recognize() method is executed\nwhich determines with state it should be.\n\nIf the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\nPOSSIBLE to give it another change on the next cycle.\n\n              Possible\n                 |\n           +-----+---------------+\n           |                     |\n     +-----+-----+               |\n     |           |               |\n  Failed      Cancelled          |\n                         +-------+------+\n                         |              |\n                     Recognized       Began\n                                        |\n                                     Changed\n                                        |\n                                 Ended/Recognized",
            "line": " dist/itsabuild.js:1140"
        },
        {
            "message": "Missing item type\nRecognizer\nEvery recognizer needs to extend from this class.",
            "line": " dist/itsabuild.js:1175"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1197"
        },
        {
            "message": "Missing item type\nset options",
            "line": " dist/itsabuild.js:1203"
        },
        {
            "message": "Missing item type\nrecognize simultaneous with an other recognizer.",
            "line": " dist/itsabuild.js:1216"
        },
        {
            "message": "Missing item type\ndrop the simultaneous link. it doesnt remove the link on the other recognizer.",
            "line": " dist/itsabuild.js:1235"
        },
        {
            "message": "Missing item type\nrecognizer can only run when an other is failing",
            "line": " dist/itsabuild.js:1250"
        },
        {
            "message": "Missing item type\ndrop the requireFailure link. it does not remove the link on the other recognizer.",
            "line": " dist/itsabuild.js:1269"
        },
        {
            "message": "Missing item type\nhas require failures boolean",
            "line": " dist/itsabuild.js:1287"
        },
        {
            "message": "Missing item type\nif the recognizer can recognize simultaneous with an other recognizer",
            "line": " dist/itsabuild.js:1295"
        },
        {
            "message": "Missing item type\nYou should use `tryEmit` instead of `emit` directly to check\nthat all the needed recognizers has failed before emitting.",
            "line": " dist/itsabuild.js:1304"
        },
        {
            "message": "Missing item type\nCheck that all the require failure recognizers has failed,\nif true, it emits a gesture event,\notherwise, setup the state to FAILED.",
            "line": " dist/itsabuild.js:1330"
        },
        {
            "message": "Missing item type\ncan we emit?",
            "line": " dist/itsabuild.js:1344"
        },
        {
            "message": "Missing item type\nupdate the recognizer",
            "line": " dist/itsabuild.js:1359"
        },
        {
            "message": "Missing item type\nreturn the state of the recognizer\nthe actual recognizing happens in this method",
            "line": " dist/itsabuild.js:1389"
        },
        {
            "message": "Missing item type\nreturn the preferred touch-action",
            "line": " dist/itsabuild.js:1398"
        },
        {
            "message": "Missing item type\ncalled when the gesture isn't allowed to recognize\nlike when another is being recognized or it is disabled",
            "line": " dist/itsabuild.js:1405"
        },
        {
            "message": "Missing item type\nget a usable string, used as event postfix",
            "line": " dist/itsabuild.js:1413"
        },
        {
            "message": "Missing item type\ndirection cons to string",
            "line": " dist/itsabuild.js:1431"
        },
        {
            "message": "Missing item type\nget a recognizer by name if it is bound to a manager",
            "line": " dist/itsabuild.js:1449"
        },
        {
            "message": "Missing item type\nThis recognizer is just used as a base for the simple attribute recognizers.",
            "line": " dist/itsabuild.js:1463"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1473"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1478"
        },
        {
            "message": "Missing item type\nUsed to check if it the recognizer receives valid input, like input.distance > 10.",
            "line": " dist/itsabuild.js:1485"
        },
        {
            "message": "Missing item type\nProcess the input and return the state for the recognizer",
            "line": " dist/itsabuild.js:1496"
        },
        {
            "message": "Missing item type\nPan\nRecognized when the pointer is down and moved in the allowed direction.",
            "line": " dist/itsabuild.js:1524"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1538"
        },
        {
            "message": "Missing item type\nPinch\nRecognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).",
            "line": " dist/itsabuild.js:1603"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1614"
        },
        {
            "message": "Missing item type\nPress\nRecognized when the pointer is down for x ms without any movement.",
            "line": " dist/itsabuild.js:1642"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1656"
        },
        {
            "message": "Missing item type\nRotate\nRecognized when two or more pointer are moving in a circular motion.",
            "line": " dist/itsabuild.js:1713"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1724"
        },
        {
            "message": "Missing item type\nSwipe\nRecognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.",
            "line": " dist/itsabuild.js:1744"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1755"
        },
        {
            "message": "Missing item type\nA tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\nbetween the given interval and position. The delay option can be used to recognize multi-taps without firing\na single tap.\n\nThe eventData from the emitted event contains the property `tapCount`, which contains the amount of\nmulti-taps being recognized.",
            "line": " dist/itsabuild.js:1799"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1823"
        },
        {
            "message": "Missing item type\nSimple way to create an manager with a default set of recognizers.",
            "line": " dist/itsabuild.js:1914"
        },
        {
            "message": "Missing item type\ndefault settings",
            "line": " dist/itsabuild.js:1931"
        },
        {
            "message": "Missing item type\nset if DOM events are being triggered.\nBut this is slower and unused by simple implementations, so disabled by default.",
            "line": " dist/itsabuild.js:1936"
        },
        {
            "message": "Missing item type\nThe value for the touchAction property/fallback.\nWhen set to `compute` it will magically set the correct value based on the added recognizers.",
            "line": " dist/itsabuild.js:1944"
        },
        {
            "message": "Missing item type",
            "line": " dist/itsabuild.js:1952"
        },
        {
            "message": "Missing item type\nEXPERIMENTAL FEATURE -- can be removed/changed\nChange the parent input target element.\nIf Null, then it is being set the to main element.",
            "line": " dist/itsabuild.js:1958"
        },
        {
            "message": "Missing item type\nforce an input class",
            "line": " dist/itsabuild.js:1967"
        },
        {
            "message": "Missing item type\nDefault recognizer setup when calling `Hammer()`\nWhen creating a new Manager these will be skipped.",
            "line": " dist/itsabuild.js:1974"
        },
        {
            "message": "Missing item type\nSome CSS properties can be used to improve the working of Hammer.\nAdd them to this method and they will be set when creating a new Manager.",
            "line": " dist/itsabuild.js:1990"
        },
        {
            "message": "Missing item type\nDisables text selection to improve the dragging gesture. Mainly for desktop browsers.",
            "line": " dist/itsabuild.js:1996"
        },
        {
            "message": "Missing item type\nDisable the Windows Phone grippers when pressing an element.",
            "line": " dist/itsabuild.js:2003"
        },
        {
            "message": "Missing item type\nDisables the default callout shown when you touch and hold a touch target.\nOn iOS, when you touch and hold a touch target such as a link, Safari displays\na callout containing information about the link. This property allows you to disable that callout.",
            "line": " dist/itsabuild.js:2010"
        },
        {
            "message": "Missing item type\nSpecifies whether zooming is enabled. Used by IE10>",
            "line": " dist/itsabuild.js:2019"
        },
        {
            "message": "Missing item type\nSpecifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.",
            "line": " dist/itsabuild.js:2026"
        },
        {
            "message": "Missing item type\nOverrides the highlight color shown when the user taps a link or a JavaScript\nclickable element in iOS. This property obeys the alpha value, if specified.",
            "line": " dist/itsabuild.js:2033"
        },
        {
            "message": "Missing item type\nManager",
            "line": " dist/itsabuild.js:2046"
        },
        {
            "message": "Missing item type\nset options",
            "line": " dist/itsabuild.js:2076"
        },
        {
            "message": "Missing item type\nstop recognizing for this session.\nThis session will be discarded, when a new [input]start event is fired.\nWhen forced, the recognizer cycle is stopped immediately.",
            "line": " dist/itsabuild.js:2097"
        },
        {
            "message": "Missing item type\nrun the recognizers!\ncalled by the inputHandler function on every movement of the pointers (touches)\nit walks through all the recognizers and tries to detect the gesture that is being made",
            "line": " dist/itsabuild.js:2107"
        },
        {
            "message": "Missing item type\nget a recognizer by its event name.",
            "line": " dist/itsabuild.js:2163"
        },
        {
            "message": "Missing item type\nadd a recognizer to the manager\nexisting recognizers with the same event name will be removed",
            "line": " dist/itsabuild.js:2182"
        },
        {
            "message": "Missing item type\nremove a recognizer by name or instance",
            "line": " dist/itsabuild.js:2206"
        },
        {
            "message": "Missing item type\nbind event",
            "line": " dist/itsabuild.js:2224"
        },
        {
            "message": "Missing item type\nunbind event, leave emit blank to remove all handlers",
            "line": " dist/itsabuild.js:2239"
        },
        {
            "message": "Missing item type\nemit event to the listeners",
            "line": " dist/itsabuild.js:2257"
        },
        {
            "message": "Missing item type\ndestroy the manager and unbinds all events\nit doesn't unbind dom events, that is the user own responsibility",
            "line": " dist/itsabuild.js:2286"
        },
        {
            "message": "Missing item type\nadd/remove the css properties as defined in manager.options.cssProps",
            "line": " dist/itsabuild.js:2300"
        },
        {
            "message": "Missing item type\ntrigger dom event",
            "line": " dist/itsabuild.js:2312"
        }
    ]
}